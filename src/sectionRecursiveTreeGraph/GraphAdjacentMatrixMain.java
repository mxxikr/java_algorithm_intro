package sectionRecursiveTreeGraph;

/**
 * 그래프와 인접 행렬
 * 그래프는 정점(Vertex)과 간선(Edge)으로 구성 된 집합임
 * G(V, E))
 *
 * 1. 무방향 그래프
 *    1 ---- 2 --- 5
 *    |      |
 *    3 ---- 4
 *   graph G(V, E)
 *   V = {1, 2, 3, 4, 5} (정점 집합)  5개
 *   E = {(1, 2), (1, 3), (1, 4), (2, 5), (3, 4)} (간선 집합) 5개
 *
 *   graph[a][b] = 1; // a와 b 사이에 간선이 존재
 *      1 2 3 4 5
 *   1  0 1 1 1 0
 *   2  1 0 0 1 1
 *   3  1 0 0 1 0
 *   4  0 1 1 0 0
 *   5  0 1 0 0 0
 *
 * 2. 방향 그래프
 *    1 ----> 2 ---> 5
 *    |       ^
 *    v       |
 *    3 ----> 4
 *    graph G(V, E)
 *    V = {1, 2, 3, 4, 5} (정점 집합)  5개
 *    E = {(1, 2), (1, 3), (4, 2), (2, 5), (3, 4)} (간선 집합) 5개
 *
 *    graph[a][b] = 1; // a에서 b로 가는 간선이 존재
 *       1 2 3 4 5
 *    1  0 1 1 0 0
 *    2  0 0 0 0 1
 *    3  0 0 0 1 0
 *    4  0 1 0 0 0
 *    5  0 0 0 0 0
 *
 * 3. 가중치 방향 그래프
 *        2       5
 *    1 ----> 2 ---> 5
 *  4 |       ^
 *    v       | 2
 *    3 ----> 4
 *       5
 *    graph G(V, E)
 *    V = {1, 2, 3, 4, 5} (정점 집합)  5개
 *    E = {(1, 2, 2), (1, 3, 4), (3, 4, 5), (4, 2, 2), (2, 5, 5)} (간선 집합) 5개
 *
 *    graph[a][b] = c; // a에서 b로 가는 간선의 가중치가 c
 *       1 2 3 4 5
 *    1  0 2 4 0 0
 *    2  0 0 0 0 5
 *    3  0 0 0 5 0
 *    4  0 2 0 0 0
 *    5  0 0 0 0 0
 */
public class GraphAdjacentMatrixMain {
}
